#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 13 14:26:55 2021

@author: shipe
"""

import numpy as np


def stream_resampling(stream, sampling_rate):
    """
    To resample the input seismic data.
    Parameters
    ----------
    stream : obspy stream
        input seismic data.
    sampling_rate : float
        required sampling rate in Hz.

    Returns
    -------
    stream : obspy stream
        output seismic data after resampling.

    """
    
    for tr in stream:
        if tr.stats.sampling_rate != sampling_rate:
            # need to do resampling
            if tr.stats.sampling_rate > sampling_rate:
                # need lowpass filter before resampling
                tr.filter('lowpass',freq=0.5*sampling_rate,zerophase=True)
            
            # perform resampling
            tr.resample(sampling_rate=sampling_rate)
    
    return stream


def maxP2Stt(db_path, hdr_filename, model, precision):
    """
    This function is used to find the maximum traveltime difference between 
    P-phase and S-phase in the imaging area.

    Parameters
    ----------
    db_path : str
        path to travetime data set.
    hdr_filename : str
        header filename of the travetime data set.
    model : str
        traveltime data set filename tage, traveltime data are generated by 
        NonLinLoc software, so the same naming rules applied.
    precision : str
        persicion for traveltime data set, can be 'single' or 'double'.

    Returns
    -------
    tt_spmax : float
        the maximal P to S arrivaltime difference among all stations in second 
        for all imaging points.
    tt_spmax_ss: float
        the maximal P to S arrivaltime difference for a perticular station in second 
        for all imaging points.
    """
    

    from loki import traveltimes
    

    # load traveltime data set-------------------------------------------------
    tobj = traveltimes.Traveltimes(db_path, hdr_filename)
    tp = tobj.load_traveltimes('P', model, precision)  # P-wave traveltime table
    ts = tobj.load_traveltimes('S', model, precision)  # S-wave traveltime table
    
    stations = list(tobj.db_stations)  # station name list
    nstation = len(stations)  # total number of stations
    nxyz= np.size(tp[stations[0]])  # total number of imaging points
    tp_mod=np.zeros([nxyz, nstation])
    ts_mod=np.zeros([nxyz, nstation])
    for i, sta in enumerate(stations):
        tp_mod[:,i]=tp[sta]
        ts_mod[:,i]=ts[sta]
    
    del tp, ts
    
    tt_spmax_ss = np.amax(ts_mod - tp_mod, axis=None)
    
    tp_redmin = np.amin(tp_mod, axis=1)  # minimal P-wave traveltimes of different stations at each imaging point
    ts_redmax = np.amax(ts_mod, axis=1)  # maximal S-wave traveltimes of different stations at each imaging point 
    
    del tp_mod, ts_mod
    
    tt_spmax = np.amax(ts_redmax - tp_redmin)  # maximal P to S arrivaltime difference in second among all imaging points

    return tt_spmax, tt_spmax_ss


