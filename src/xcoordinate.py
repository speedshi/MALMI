#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 11 11:52:23 2022

Functions related to coordinates, such as coordinate extraction and conversion.

@author: shipe
"""


import numpy as np
from loki import LatLongUTMconversion


def grid2mgregion(grid):
    """
    Retrive the boundary latitude and lontidue of the migration region from grid parameters.
    Only applies to rectrangular region without rotation and shift, 
    i.e.  X-axis -> East, Y-axis -> North.

    Parameters
    ----------
    grid : dict
        grid['LatOrig']: latitude in decimal degrees of the origin point of the rectangular migration region (float, min:-90.0, max:90.0);
        grid['LongOrig']: longitude in decimal degrees of the origin point of the rectangular migration region (float, min:-180.0, max:180.0);
        grid['xOrig']: X location of the grid origin in km relative to the geographic origin (positive: east).
        grid['yOrig']: Y location of the grid origin in km relative to the geographic origin (positive: north).
        grid['xNum']: number of grid nodes in the X direction;
        grid['yNum']: number of grid nodes in the Y direction;
        grid['dgrid']: grid spacing in kilometers.

    Returns
    -------
    mgregion : dict
        the lat/lon boundary of migration region in degree.
        mgregion['latitude_min']
        mgregion['latitude_max']
        mgregion['longitude_min']
        mgregion['longitude_max']

    """
    
    # determine the lon/lat of the migration area
    refell=23
    (UTMZone, eorig, norig) = LatLongUTMconversion.LLtoUTM(refell, grid['LatOrig'], grid['LongOrig'])  # the Cartesian coordinate of the origin point in meter
    east_m_last = (grid['xOrig'] + (grid['xNum']-1) * grid['dgrid']) * 1000.0  # the East coordinate (X) of the last point for the migration area in meter
    north_m_last = (grid['yOrig'] + (grid['yNum']-1) * grid['dgrid']) * 1000.0  # the North coordinate (Y) of the last point for the migration area in meter
    latitude_last, longitude_last = LatLongUTMconversion.UTMtoLL(refell, north_m_last+norig, east_m_last+eorig, UTMZone)  # from Cartisian to latitude, longitude
    east_m_first = grid['xOrig'] * 1000.0  # the East coordinate (X) of the first point for the migration area in meter
    north_m_first = grid['yOrig'] * 1000.0  # the North coordinate (Y) of the first point for the migration area in meter
    latitude_first, longitude_first = LatLongUTMconversion.UTMtoLL(refell, north_m_first+norig, east_m_first+eorig, UTMZone)  # from Cartisian to latitude, longitude
    mgregion = {}
    mgregion['longitude_min'] = min(longitude_last, grid['LongOrig'], longitude_first)
    mgregion['longitude_max'] = max(longitude_last, grid['LongOrig'], longitude_first)
    mgregion['latitude_min'] = min(latitude_last, grid['LatOrig'], latitude_first)
    mgregion['latitude_max'] = max(latitude_last, grid['LatOrig'], latitude_first)
    
    return mgregion


def get_lokicoord(dir_tt, hdr_filename='header.hdr', extr=0.05, consider_mgregion=True):
    """
    This function is used to get the coordinates of station, plotting region
    and migration region from traveltime table data set of LOKI.

    Parameters
    ----------
    dir_tt : str
        path to the travetime data directory of LOKI.
    hdr_filename : str, optional
        travetime data set header filename. The default is 'header.hdr'.
    extr : float, optional
        extend ratio for automatically get the plotting region. 
        The default is 0.05.
    consider_mgregion : boolen
        indicate whether consider 'mgregion' when calculating 'region'.

    Returns
    -------
    inv : obspy invertory format
        station inventory containing station metadata.
    region : list of float
        the lat/lon boundary of plotting region, in format of 
        [lon_min, lon_max, lat_min, lat_max] in degree.
    mgregion : list of float
        the lat/lon boundary of migration region, in format of 
        [lon_min, lon_max, lat_min, lat_max] in degree.
    
    """
    
    from loki import traveltimes
    from obspy.core.inventory import Inventory, Network, Station
    
    # load station metadata from traveltime table data set
    tobj = traveltimes.Traveltimes(dir_tt, hdr_filename)
    station_name = []  # station name
    station_lon = []  # station longitude in degree
    station_lat = []  # station latitude in degree
    station_ele = []  # station elevation in km
    for staname in tobj.db_stations:
        station_name.append(staname)
        station_lat.append(tobj.stations_coordinates[staname][0])
        station_lon.append(tobj.stations_coordinates[staname][1])
        station_ele.append(tobj.stations_coordinates[staname][2])
    
    # create an obspy invertory according to station information
    inv = Inventory(networks=[], source="MALMI_tt")
    net = Network(code="XX", stations=[], description="Tempory network generated by MALMI.")
    for ista in range(len(station_name)):
        sta = Station(code=station_name[ista], latitude=station_lat[ista],
                      longitude=station_lon[ista], elevation=station_ele[ista]*1000)  # note elevation need to transfer to meter
        net.stations.append(sta)
    inv.networks.append(net)
    
    # determine the lon/lat of migration area
    refell=23
    (UTMZone, eorig, norig) = LatLongUTMconversion.LLtoUTM(refell, tobj.lat0, tobj.lon0)  # the Cartesian coordinate of the origin point in meter
    elast_m = tobj.x[-1]*1000.0  # the East coordinate (X) of the last point for the migration area in meter
    nlast_m = tobj.y[-1]*1000.0  # the North coordinate (Y) of the last point for the migration area in meter
    late_last, lone_last = LatLongUTMconversion.UTMtoLL(refell, nlast_m+norig, elast_m+eorig, UTMZone)  # latitude, longitude
    efirst_m = tobj.x[0]*1000.0  # the East coordinate (X) of the first point for the migration area in meter
    nfirst_m = tobj.y[0]*1000.0  # the North coordinate (Y) of the first point for the migration area in meter
    late_first, lone_first = LatLongUTMconversion.UTMtoLL(refell, nfirst_m+norig, efirst_m+eorig, UTMZone)  # latitude, longitude
    mgregion = []
    mgregion.append(min(lone_last, tobj.lon0, lone_first))
    mgregion.append(max(lone_last, tobj.lon0, lone_first))
    mgregion.append(min(late_last, tobj.lat0, late_first))
    mgregion.append(max(late_last, tobj.lat0, late_first))
    
    # determine the lon/lat for plotting the basemap
    if consider_mgregion:
        lon_min = min(np.min(station_lon), mgregion[0])
        lon_max = max(np.max(station_lon), mgregion[1])
        lat_min = min(np.min(station_lat), mgregion[2])
        lat_max = max(np.max(station_lat), mgregion[3])
    else:
        lon_min = np.min(station_lon)
        lon_max = np.max(station_lon)
        lat_min = np.min(station_lat)
        lat_max = np.max(station_lat)
    region = [lon_min-extr*(lon_max-lon_min), lon_max+extr*(lon_max-lon_min),
              lat_min-extr*(lat_max-lat_min), lat_max+extr*(lat_max-lat_min)]
    
    return inv, region, mgregion



def get_regioncoord(grid, stainv, extr=0.05, consider_mgregion=True):
    """
    Get the coordinates of plotting region and migration region from grid.

    Parameters
    ----------
    grid : dict
        MALMI grid dictionary.
    stainv : obspy invertory object
        station inventory.
    extr : float, optional
        extend ratio for automatically get the plotting region. 
        The default is 0.05.
    consider_mgregion : boolen
        indicate whether consider 'mgregion' when calculating 'region'.

    Returns
    -------
    region : list of float
        the lat/lon boundary of plotting region, in format of 
        [lon_min, lon_max, lat_min, lat_max] in degree.
    mgregion : list of float
        the lat/lon boundary of migration region, in format of 
        [lon_min, lon_max, lat_min, lat_max] in degree.

    """
    
    mgregion_dict = grid2mgregion(grid)
    mgregion = [mgregion_dict['longitude_min'], mgregion_dict['longitude_max'], mgregion_dict['latitude_min'], mgregion_dict['latitude_max']]
    
    station_lon = []
    station_lat = []
    for inet in stainv:
        for ista in inet:
            station_lon.append(ista.longitude)
            station_lat.append(ista.latitude)
            
    # determine the lon/lat range for plotting basemap
    if consider_mgregion:
        lon_min = min(np.min(station_lon), mgregion[0])
        lon_max = max(np.max(station_lon), mgregion[1])
        lat_min = min(np.min(station_lat), mgregion[2])
        lat_max = max(np.max(station_lat), mgregion[3])
    else:
        lon_min = np.min(station_lon)
        lon_max = np.max(station_lon)
        lat_min = np.min(station_lat)
        lat_max = np.max(station_lat)
    region = [lon_min-extr*(lon_max-lon_min), lon_max+extr*(lon_max-lon_min),
              lat_min-extr*(lat_max-lat_min), lat_max+extr*(lat_max-lat_min)]
    
    return region, mgregion

